import 'package:deriv_chart/src/add_ons/drawing_tools_ui/drawing_tool_config.dart';
import 'package:deriv_chart/src/models/axis_range.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/widgets.dart';

import '../../chart/data_visualization/chart_data.dart';
import '../../chart/data_visualization/models/animation_info.dart';
import '../enums/drawing_tool_state.dart';
import '../interactable_drawing_custom_painter.dart';
import '../interactive_layer_behaviours/interactive_layer_desktop_behaviour.dart';
import '../interactive_layer_behaviours/interactive_layer_mobile_behaviour.dart';
import 'drawing_adding_preview.dart';
import 'drawing_v2.dart';

/// The class that will be generated by the drawing tool config instance when
/// they are created or the saved ones that are loaded from storage.
/// The information from this class (its subclasses) will be used to draw the
/// tool on the chart.
/// It will keep the latest state of the drawing tool as the user interacts
/// with the tools in the runtime.
/// During the time that user interacts with a tool. by some debounce mechanism
/// This class will update the config which is supposed to be saved in the storage.
abstract class InteractableDrawing<T extends DrawingToolConfig>
    implements DrawingV2 {
  /// Initializes [InteractableDrawing].
  InteractableDrawing({required this.config});

  @override
  String get id => config.configId ?? '';

  /// The drawing tool config.
  final T config;

  /// Returns the updated config.
  T getUpdatedConfig();

  /// Returns `true` if the drawing tool is hit by the given offset.
  @override
  bool hitTest(Offset offset, EpochToX epochToX, QuoteToY quoteToY);

  /// Called when the drawing tool dragging is started.
  @override
  void onDragStart(
    DragStartDetails details,
    EpochFromX epochFromX,
    QuoteFromY quoteFromY,
    EpochToX epochToX,
    QuoteToY quoteToY,
  ) {}

  /// Called when the drawing tool is dragged and updates the drawing position
  /// properties based on the dragging [details].
  ///
  /// Each drawing will know how to handle and update itself accordingly based
  /// on where the dragging position is like if it's dragging a point or a line
  /// of the tool.
  ///
  /// The drawing tools will update its properties based on the dragging at
  /// runtime. Saving the new updates to a persistent storage is not the
  /// responsibility of this method.
  @override
  void onDragUpdate(
    DragUpdateDetails details,
    EpochFromX epochFromX,
    QuoteFromY quoteFromY,
    EpochToX epochToX,
    QuoteToY quoteToY,
  ) {}

  /// Called when the drawing tool dragging is ended.
  @override
  void onDragEnd(
    DragEndDetails details,
    EpochFromX epochFromX,
    QuoteFromY quoteFromY,
    EpochToX epochToX,
    QuoteToY quoteToY,
  ) {}

  /// Called when the user's pointer is hovering over the drawing tool.
  @override
  void onHover(
    PointerHoverEvent event,
    EpochFromX epochFromX,
    QuoteFromY quoteFromY,
    EpochToX epochToX,
    QuoteToY quoteToY,
  ) {}

  @override
  void paint(
    Canvas canvas,
    Size size,
    EpochToX epochToX,
    QuoteToY quoteToY,
    AnimationInfo animationInfo,
    GetDrawingState getDrawingState,
  );

  @override
  bool shouldRepaint(
    Set<DrawingToolState> drawingState,
    covariant InteractableDrawing<T> oldDrawing,
  ) {
    return config != oldDrawing.config ||
        drawingState.contains(DrawingToolState.dragging) ||
        drawingState.contains(DrawingToolState.adding) ||
        drawingState.contains(DrawingToolState.animating);
  }

  @override
  bool isInViewPort(EpochRange epochRange, QuoteRange quoteRange);

  /// Returns back the [InteractableDrawing] which is used for showing the
  /// preview of the tool when we're on [InteractiveLayerMobileBehaviour].
  ///
  /// Override this method if you want to show a different preview for mobile
  /// other than the default one.
  DrawingAddingPreview getAddingPreviewForMobileBehaviour(
    InteractiveLayerMobileBehaviour layerBehaviour,
  );

  /// Returns back the [InteractableDrawing] which is used for showing the
  /// preview of the tool when we're on [InteractiveLayerDesktopBehaviour].
  ///
  /// Override this method if you want to show a different preview for desktop
  /// other than the default one.
  DrawingAddingPreview getAddingPreviewForDesktopBehaviour(
    InteractiveLayerDesktopBehaviour layerBehaviour,
  );
}
